# Copyright (C) Intel Corporation
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# See https://llvm.org/LICENSE.txt for license information.

# This file will be installed to folder:
# {dpct_install_folder}/extensions/python_rules.
# The rule specified in this file can be imported with commandline option:
# --rule-file={dpct_install_folder}/extensions/python_rules/python_build_script_migration_rule_ipex.yaml

# torch import rules
- Rule: rule_import_torch
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: import_torch
  In: import torch
  Out: |
    import torch
    import intel_extension_for_pytorch

# CPP extension rules
- Rule: rule_from_torch_utils_import_cpp_extension_only
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: from_torch_utils_import_cpp_extension_only
  In: from torch.utils import cpp_extension
  Out: from intel_extension_for_pytorch.xpu import cpp_extension

- Rule: rule_torch_utils_cpp_extension
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: torch_utils_cpp_extension
  In: torch.utils.cpp_extension
  Out: intel_extension_for_pytorch.xpu.cpp_extension

- Rule: rule_utils_cpp_extension
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: utils_cpp_extension
  In: utils.cpp_extension
  Out: intel_extension_for_pytorch.xpu.cpp_extension

- Rule: rule_cpp_extension_import_CppExtension
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_import_CppExtension
  In: from ${mod_prefix}cpp_extension import${ws1}(${class_prefix}CppExtension,${class_suffix})
  Out: |
    from ${mod_prefix}cpp_extension import${ws1}(${class_prefix}${class_suffix})
    from torch.utils.cpp_extension import CppExtension

# CUDA_HOME rules
- Rule: rule_CUDA_HOME
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: CUDA_HOME
  In: CUDA_HOME
  Out: SYCL_HOME

- Rule: rule_torch_utils_cpp_extension_CUDA_HOME
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: torch_utils_cpp_extension_CUDA_HOME
  In: intel_extension_for_pytorch.xpu.cpp_extension.SYCL_HOME
  Out: __import__('os').environ.get('CMPLR_ROOT')

- Rule: rule_cpp_extension_import_CUDA_HOME_only
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_import_CUDA_HOME_only
  In: from ${mod_prefix}cpp_extension import SYCL_HOME
  Out: SYCL_HOME = __import__('os').environ.get('CMPLR_ROOT')

- Rule: rule_cpp_extension_import_(CUDA_HOME)_only
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_import_(CUDA_HOME)_only
  In: from ${mod_prefix}cpp_extension import${ws}(${ws1}SYCL_HOME)
  Out: SYCL_HOME = __import__('os').environ.get('CMPLR_ROOT')

- Rule: rule_cpp_extension_import_CUDA_HOME
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_import_CUDA_HOME
  In: from ${mod_prefix}cpp_extension import${ws}(${class_prefix}SYCL_HOME,${class_suffix})
  Out: |
    from ${mod_prefix}cpp_extension import${ws}(${class_prefix}${class_suffix})
    SYCL_HOME = __import__('os').environ.get('CMPLR_ROOT')

# Extension rules
- Rule: rule_CUDAExtension
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: CUDAExtension
  In: CUDAExtension
  Out: DPCPPExtension

- Rule: rule_include_dirs
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: include_dirs
  In: DPCPPExtension(${args})
  Out: DPCPPExtension(${args}, include_dirs=cpp_extension.include_paths(),)

- Rule: rule_cpp_extension_load_no_extra_cflags
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_load_no_extra_cflags
  In: torch.utils.cpp_extension.load(${args})
  Out: torch.utils.cpp_extension.load(${args}, extra_cflags=['-fsycl'])

- Rule: rule_cpp_extension_load_no_extra_ldflags
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_extension_load_no_extra_ldflags
  In: torch.utils.cpp_extension.load(${args})
  Out: torch.utils.cpp_extension.load(${args}, extra_ldflags=['-fsycl'])

- Rule: rule_BuildExtension
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: BuildExtension
  In: BuildExtension
  Out: DpcppBuildExtension

# src file ext rules
- Rule: rule_cpp_file_in_func
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_file_in_func
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cpp
      Out: ${arg}.${rewrite_extention_name}

- Rule: rule_cpp_file_in_list
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cpp_file_in_list
  In: "[${value}]"
  Out: "[${value}]"
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cpp
      Out: ${arg}.${rewrite_extention_name}

- Rule: rule_cu_file_in_func
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cu_file_in_func
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.${rewrite_extention_name}

- Rule: rule_cu_file_in_list
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cu_file_in_list
  In: "[${value}]"
  Out: "[${value}]"
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.${rewrite_extention_name}

# cuda import rules
- Rule: rule_from_torch_import_cuda
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: from_torch_import_cuda
  In: from torch import cuda
  Out: from torch import xpu

- Rule: rule_cuda_is_available
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_is_available
  In: cuda.is_available
  Out: xpu.is_available

- Rule: rule_version_cuda
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: version_cuda
  In: version.cuda
  Out: version.xpu

#init rules
- Rule: rule_cuda_init
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_init
  In: cuda.init
  Out: xpu.init

- Rule: rule_cuda_is_initialized
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_is_initialized
  In: cuda.is_initialized
  Out: xpu.is_initialized

# device rules
- Rule: rule_cuda_device_count
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_device_count
  In: cuda.device_count
  Out: xpu.device_count

- Rule: rule_cuda_current_device
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_current_device
  In: cuda.current_device
  Out: xpu.current_device

- Rule: rule_cuda_set_device
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_set_device
  In: cuda.set_device
  Out: xpu.set_device

- Rule: rule_cuda_get_device_properties
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_get_device_properties
  In: cuda.get_device_properties
  Out: xpu.get_device_properties

- Rule: rule_cuda_get_device_name
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_get_device_name
  In: cuda.get_device_name
  Out: xpu.get_device_name

- Rule: rule_cuda_get_device_capability
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_get_device_capability
  In: cuda.get_device_capability
  Out: xpu.get_device_capability

- Rule: rule_cuda_device_of
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_device_of
  In: cuda.device_of
  Out: xpu.device_of

- Rule: rule_cuda_get_arch_list
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_get_arch_list
  In: ${torch_prefix}cuda.get_arch_list()
  Out: ${torch_prefix}['']
  Subrules:
    torch_prefix:
      MatchMode: Full
      In: torch.
      Out: ""

- Rule: rule_cuda_synchronize
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_synchronize
  In: cuda.synchronize
  Out: xpu.synchronize

# stream rules
- Rule: rule_cuda_current_stream
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_current_stream
  In: cuda.current_stream
  Out: xpu.current_stream

- Rule: rule_cuda_StreamContext
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_StreamContext
  In: cuda.StreamContext
  Out: xpu.StreamContext

- Rule: rule_cuda_stream
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_stream
  In: cuda.stream
  Out: xpu.stream

- Rule: rule_cuda_set_stream
  Kind: PythonRule
  Priority: Fallback
  MatchMode: Partial
  PythonSyntax: cuda_set_stream
  In: cuda.set_stream
  Out: xpu.set_stream
